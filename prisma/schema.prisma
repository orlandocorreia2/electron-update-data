generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  created_by_id String?
  name          String
  email         String    @unique
  password      String
  expired_at    DateTime
  phone         String?
  address       String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  createdBy               User?                 @relation("UserCreatedBy", fields: [created_by_id], references: [id])
  createdUsers            User[]                @relation("UserCreatedBy")
  createdPermissionGroups PermissionGroup[]     @relation("UserCreatedPermissionGroups")
  permissionGroups        UserPermissionGroup[]

  @@map("users")
}

model PermissionGroup {
  id            String    @id @default(uuid())
  created_by_id String
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  createdBy User                  @relation("UserCreatedPermissionGroups", fields: [created_by_id], references: [id])
  users     UserPermissionGroup[]
  rules     PermissionGroupRule[]

  @@map("permission_groups")
}

model PermissionRule {
  id          String              @id @default(uuid())
  rule        String              @unique
  type        PermissionRuleTypes
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?

  permissionGroupRule PermissionGroupRule[]

  @@map("permission_rules")
}

enum PermissionRuleTypes {
  permissionGroup
  user
  auctionProperties
}

model UserPermissionGroup {
  user_id             String
  permission_group_id String

  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permissionGroup PermissionGroup @relation(fields: [permission_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, permission_group_id])
  @@map("users_permission_groups")
}

model PermissionGroupRule {
  permission_group_id String
  permission_rule_id  String

  permissionGroup PermissionGroup @relation(fields: [permission_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permissionRule  PermissionRule  @relation(fields: [permission_rule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([permission_group_id, permission_rule_id])
  @@map("permission_groups_rules")
}

model Token {
  id    String @id @default(uuid())
  token String

  @@map("tokens")
}

model AuctionProperty {
  id                         String   @id @default(uuid())
  number_property            BigInt
  uf                         String
  city                       String
  neighborhood               String
  address                    String
  price                      BigInt
  appraisal_value            BigInt
  discount                   BigInt
  property_type              String
  description                String
  sale_method                String
  access_link                String
  accept_financing           Boolean  @default(false)
  photo_link                 String?
  registration_property_link String?
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt

  @@map("auction_properties")
}
